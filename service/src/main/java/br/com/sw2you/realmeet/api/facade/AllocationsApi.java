/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.sw2you.realmeet.api.facade;

import br.com.sw2you.realmeet.api.model.AllocationDTO;
import br.com.sw2you.realmeet.api.model.CreateAllocationDTO;
import java.time.LocalDate;
import br.com.sw2you.realmeet.api.model.ResponseError;
import br.com.sw2you.realmeet.api.model.UpdateAllocationDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-10T23:24:27.171536500-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "allocations", description = "the allocations API")
public interface AllocationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /allocations : Creates an allocation
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param createAllocationDTO  (required)
     * @return Created (status code 201)
     *         or The server understands the content type of the request entity but was unable to process the contained instructions. (status code 422)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Creates an allocation", nickname = "createAllocation", notes = "", response = AllocationDTO.class, tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = AllocationDTO.class),
        @ApiResponse(code = 422, message = "The server understands the content type of the request entity but was unable to process the contained instructions.", response = ResponseError.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/allocations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default CompletableFuture<ResponseEntity<AllocationDTO>> createAllocation(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateAllocationDTO createAllocationDTO) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "null";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * DELETE /allocations/{id} : Deletes an allocation by ID
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param id ID of the allocation (required)
     * @return Deleted Successfully (status code 204)
     *         or Not Found (status code 404)
     *         or The server understands the content type of the request entity but was unable to process the contained instructions. (status code 422)
     */
    @ApiOperation(value = "Deletes an allocation by ID", nickname = "deleteAllocation", notes = "", tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted Successfully"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 422, message = "The server understands the content type of the request entity but was unable to process the contained instructions.", response = ResponseError.class, responseContainer = "List") })
    @RequestMapping(value = "/allocations/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default CompletableFuture<ResponseEntity<Void>> deleteAllocation(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "ID of the allocation",required=true) @PathVariable("id") Long id) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /allocations : Lists allocations
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param employeeEmail Email of the employee (optional)
     * @param roomId Room ID (optional)
     * @param startAt Allocation start time (optional)
     * @param endAt Allocation end time (optional)
     * @param orderBy Field to order by (optional)
     * @param limit Maximum number of returned records (optional)
     * @param page The page of records to fetch (0 index based) (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Lists allocations", nickname = "listAllocations", notes = "", response = AllocationDTO.class, responseContainer = "List", tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AllocationDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/allocations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default CompletableFuture<ResponseEntity<List<AllocationDTO>>> listAllocations(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "Email of the employee") @Valid @RequestParam(value = "employeeEmail", required = false) String employeeEmail,@ApiParam(value = "Room ID") @Valid @RequestParam(value = "roomId", required = false) Long roomId,@ApiParam(value = "Allocation start time") @Valid @RequestParam(value = "startAt", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate startAt,@ApiParam(value = "Allocation end time") @Valid @RequestParam(value = "endAt", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate endAt,@ApiParam(value = "Field to order by") @Valid @RequestParam(value = "orderBy", required = false) String orderBy,@ApiParam(value = "Maximum number of returned records") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "The page of records to fetch (0 index based)") @Valid @RequestParam(value = "page", required = false) Integer page) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "null";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * PUT /allocations/{id} : Updates an allocation by ID
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param id ID of the allocation (required)
     * @param updateAllocationDTO  (required)
     * @return Updated Successfully (status code 204)
     *         or Not Found (status code 404)
     *         or The server understands the content type of the request entity but was unable to process the contained instructions. (status code 422)
     */
    @ApiOperation(value = "Updates an allocation by ID", nickname = "updateAllocation", notes = "", tags={ "allocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Updated Successfully"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 422, message = "The server understands the content type of the request entity but was unable to process the contained instructions.", response = ResponseError.class, responseContainer = "List") })
    @RequestMapping(value = "/allocations/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default CompletableFuture<ResponseEntity<Void>> updateAllocation(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "ID of the allocation",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateAllocationDTO updateAllocationDTO) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }

}
