/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.sw2you.realmeet.api.facade;

import java.time.LocalDate;
import br.com.sw2you.realmeet.api.model.ResponseError;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-10T23:24:27.171536500-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "reports", description = "the reports API")
public interface ReportsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /reports/allocation : Generates the allocation report
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param email The e-mail to send the report (required)
     * @param dateFrom Start date to filter (required)
     * @param dateTo End date to filter (required)
     * @param reportFormat Report format. Can be &#39;PDF&#39; or &#39;XML&#39;. Defaults to &#39;PDF&#39; (optional)
     * @return Created (status code 201)
     *         or The server understands the content type of the request entity but was unable to process the contained instructions. (status code 422)
     */
    @ApiOperation(value = "Generates the allocation report", nickname = "createAllocationReport", notes = "", tags={ "report", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 422, message = "The server understands the content type of the request entity but was unable to process the contained instructions.", response = ResponseError.class, responseContainer = "List") })
    @RequestMapping(value = "/reports/allocation",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default CompletableFuture<ResponseEntity<Void>> createAllocationReport(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@NotNull @ApiParam(value = "The e-mail to send the report", required = true) @Valid @RequestParam(value = "email", required = true) String email,@NotNull @ApiParam(value = "Start date to filter", required = true) @Valid @RequestParam(value = "dateFrom", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate dateFrom,@NotNull @ApiParam(value = "End date to filter", required = true) @Valid @RequestParam(value = "dateTo", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate dateTo,@ApiParam(value = "Report format. Can be 'PDF' or 'XML'. Defaults to 'PDF'") @Valid @RequestParam(value = "reportFormat", required = false) String reportFormat) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }

}
