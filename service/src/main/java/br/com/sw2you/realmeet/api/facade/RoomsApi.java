/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.sw2you.realmeet.api.facade;

import br.com.sw2you.realmeet.api.model.CreateRoomDTO;
import br.com.sw2you.realmeet.api.model.ResponseError;
import br.com.sw2you.realmeet.api.model.RoomDTO;
import br.com.sw2you.realmeet.api.model.UpdateRoomDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-10T23:24:27.171536500-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "rooms", description = "the rooms API")
public interface RoomsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /rooms : Creates a room
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param createRoomDTO  (required)
     * @return Created (status code 201)
     *         or The server understands the content type of the request entity but was unable to process the contained instructions. (status code 422)
     */
    @ApiOperation(value = "Creates a room", nickname = "createRoom", notes = "", response = RoomDTO.class, tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = RoomDTO.class),
        @ApiResponse(code = 422, message = "The server understands the content type of the request entity but was unable to process the contained instructions.", response = ResponseError.class, responseContainer = "List") })
    @RequestMapping(value = "/rooms",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default CompletableFuture<ResponseEntity<RoomDTO>> createRoom(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateRoomDTO createRoomDTO) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "null";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * DELETE /rooms/{id} : Deletes a room by ID
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param id ID of the room (required)
     * @return Deleted Successfully (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Deletes a room by ID", nickname = "deleteRoom", notes = "", tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted Successfully"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rooms/{id}",
        method = RequestMethod.DELETE)
    default CompletableFuture<ResponseEntity<Void>> deleteRoom(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "ID of the room",required=true) @PathVariable("id") Long id) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /rooms/{id} : Return a room by ID
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param id ID of the room (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Return a room by ID", nickname = "getRoom", notes = "", response = RoomDTO.class, tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = RoomDTO.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rooms/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default CompletableFuture<ResponseEntity<RoomDTO>> getRoom(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "ID of the room",required=true) @PathVariable("id") Long id) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "null";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * PUT /rooms/{id} : Updates a room by ID
     *
     * @param apiKey The API key to authenticate the request (required)
     * @param id ID of the room (required)
     * @param updateRoomDTO  (required)
     * @return Updated Successfully (status code 204)
     *         or Not Found (status code 404)
     *         or The server understands the content type of the request entity but was unable to process the contained instructions. (status code 422)
     */
    @ApiOperation(value = "Updates a room by ID", nickname = "updateRoom", notes = "", tags={ "room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Updated Successfully"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 422, message = "The server understands the content type of the request entity but was unable to process the contained instructions.", response = ResponseError.class, responseContainer = "List") })
    @RequestMapping(value = "/rooms/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default CompletableFuture<ResponseEntity<Void>> updateRoom(@ApiParam(value = "The API key to authenticate the request" ,required=true) @RequestHeader(value="api-key", required=true) String apiKey,@ApiParam(value = "ID of the room",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateRoomDTO updateRoomDTO) {
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }

}
